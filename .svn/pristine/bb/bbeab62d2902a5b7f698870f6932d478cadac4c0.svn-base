package files;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JOptionPane;

import app.MainFrame;
import interpreters.StringUtil;
import model.Attribute;

public class DBFile extends InfAbstractFile {

	@Override
	public void update() {
		String updateTableSQL = "UPDATE POSLOVNA_GODINA";
		try {
			PreparedStatement ps = MainFrame.getInstance().getConn().prepareStatement(updateTableSQL);
			ps.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void add() {

	}

	@Override
	public void change() {

	}

	@Override
	public void delete() {

	}

	@Override
	public void fetchNext() {
		String sql = "SELECT";
		int i = 0;
		for (Attribute a : getEntity().getAttributes()) {
			if (getEntity().getAttributes().size() - 1 == i) {
				sql += " " + StringUtil.normalToDBname(a.getName()) + " ";
			} else {
				sql += " " + StringUtil.normalToDBname(a.getName()) + ",";
			}
			i++;
		}
		sql += "FROM " + StringUtil.normalToDBname(getEntity().getName());
		
		Statement statement = null;
		try {

			statement = MainFrame.getInstance().getConn().createStatement();
			getModel().removeAll();
			ResultSet result = statement.executeQuery(sql);
			while (result.next()) {
				Object[] object = new Object[getEntity().getAttributes().size()];
				int k = 0;
				for (Attribute a : getEntity().getAttributes()) {
					switch (a.getType().toUpperCase()) {
					case "INTEGER":
						Integer intFromBase = result.getInt(StringUtil.normalToDBname(a.getName()));
						object[k] = intFromBase;
						break;
					case "VARCHAR" :
						String stringFromBase = result.getString(StringUtil.normalToDBname(a.getName()));
						object[k] = stringFromBase;
						break;
					case "BOOLEAN":
						Boolean booleanFromBase = result.getBoolean(StringUtil.normalToDBname(a.getName()));
						object[k] = booleanFromBase;
						break;
					case "DATE":
						Date dateFromBase = result.getDate(StringUtil.normalToDBname(a.getName()));
						object[k] = dateFromBase;
						break;
					}
					k++;
				}
				
				getModel().addRow(object);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void sort(ArrayList<String> string, ArrayList<Integer> integer) {

		String sql = "SELECT";
		int i = 0;
		for (Attribute a : getEntity().getAttributes()) {
			if (getEntity().getAttributes().size() - 1 == i) {
				sql += " " + StringUtil.normalToDBname(a.getName()) + " ";
			} else {
				sql += " " + StringUtil.normalToDBname(a.getName()) + ",";
			}
			i++;
		}

		sql += "FROM " + StringUtil.normalToDBname(getEntity().getName()) + " ORDER BY";
		for (int j = 0; j < integer.size(); j++) {
			if ((integer.size() - 1) == j) {
				sql += " " + StringUtil.normalToDBname(getEntity().getAttributes().get(j).getName()) + " "
						+ StringUtil.ascOrDesc(string.get(j));
			} else {
				sql += " " + StringUtil.normalToDBname(getEntity().getAttributes().get(j).getName()) + " "
						+ StringUtil.ascOrDesc(string.get(j)) + ",";
			}

		}
		Statement statement = null;
		try {

			statement = MainFrame.getInstance().getConn().createStatement();
			getModel().removeAll();
			ResultSet result = statement.executeQuery(sql);
			while (result.next()) {
				Object[] object = new Object[getEntity().getAttributes().size()];
				int k = 0;
				for (Attribute a : getEntity().getAttributes()) {
					switch (a.getType().toUpperCase()) {
					case "INTEGER":
						Integer intFromBase = result.getInt(StringUtil.normalToDBname(a.getName()));
						object[k] = intFromBase;
						break;
					case "VARCHAR" :
						String stringFromBase = result.getString(StringUtil.normalToDBname(a.getName()));
						object[k] = stringFromBase;
						break;
					case "BOOLEAN":
						Boolean booleanFromBase = result.getBoolean(StringUtil.normalToDBname(a.getName()));
						object[k] = booleanFromBase;
						break;
					case "DATE":
						Date dateFromBase = result.getDate(StringUtil.normalToDBname(a.getName()));
						object[k] = dateFromBase;
						break;
					}
					k++;
				}
				
				getModel().addRow(object);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		System.out.println(sql);
	}

	@Override
	public void sort() {
		// TODO Auto-generated method stub

	}

	@Override
	public void add(ArrayList<String> objects) {
		String sql = "INSERT INTO " + StringUtil.normalToDBname(getEntity().getName())+"(";
		int i = 0;
		for (Attribute a : getEntity().getAttributes()) {
			if (getEntity().getAttributes().size() - 1 == i) {
				sql += StringUtil.normalToDBname(a.getName()) + ") ";
			} else {
				sql += StringUtil.normalToDBname(a.getName()) + ", ";
			}
			i++;
		}
		
		sql+="VALUES(";
		i = 0;
		for (Attribute a : getEntity().getAttributes()) {
			if (getEntity().getAttributes().size() - 1 == i) {
				sql += "?" + ")";
			} else {
				sql += "?" + ", ";
			}
			i++;
		}
		PreparedStatement prepareStatement = null;
		try {
			prepareStatement = MainFrame.getInstance().getConn().prepareStatement(sql);
			System.out.println(objects.isEmpty());
			int k = 0;
			for (Attribute a : getEntity().getAttributes()) {
				switch (a.getType().toUpperCase()) {
				case "INTEGER":
					prepareStatement.setInt(k+1, Integer.parseInt(objects.get(k)));
					break;
				case "VARCHAR" :
					prepareStatement.setString(k+1, objects.get(k));
					break;
				case "BOOLEAN":
					prepareStatement.setBoolean(k+1, Boolean.parseBoolean(objects.get(k)));
					break;
				case "DATE":
					prepareStatement.setDate(k+1, new java.sql.Date(k) );
					break;
				}
				k++;
			}
			prepareStatement.executeUpdate();
		} catch (SQLException e) {
			JOptionPane.showConfirmDialog(null, "Izgleda da podatak sa tim kljucem vec postoji");
		}
		
	}

}
